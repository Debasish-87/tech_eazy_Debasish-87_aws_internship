name: Deploy Infrastructure and App

on:
  push:
    branches:
      - feature/devops-assignment-3   # change to `main` once merged
    tags:
      - deploy-*                     # e.g. deploy-dev / deploy-prod

# ---------- Global environment ----------
env:
  AWS_REGION: ap-south-1
  STAGE: dev                 # default; overridden from tag value
  TF_IN_AUTOMATION: "true"   # tells Terraform it is running in CI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source
      - uses: actions/checkout@v3

      # 2. If the workflow was triggered by a tag like `deploy-prod`,
      #    derive STAGE from the tag name (prod, dev, etc.) and export to ENV
      - name: Derive stage from tag
        if: startsWith(github.ref, 'refs/tags/deploy-')
        run: echo "STAGE=${GITHUB_REF#refs/tags/deploy-}" >> "$GITHUB_ENV"

      # 3. Configure AWS credentials (stored as repo → Settings → Secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4. Install Terraform CLI
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # 5‑A. Terraform init (non‑interactive)
      - name: Terraform Init
        run: terraform init -input=false

      # 5‑B. Terraform plan (read correct tfvars based on stage)
      - name: Terraform Plan
        run: terraform plan -input=false -no-color -var-file="${{ env.STAGE }}_config.tfvars"

      # 5‑C. Terraform apply
      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -no-color -var-file="${{ env.STAGE }}_config.tfvars"

      # 6. Capture EC2 public IP from Terraform output
      - name: Capture EC2 Public IP
        id: ec2
        run: echo "PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> "$GITHUB_ENV"

      # 7. Wait for SSH service on the instance (max ~2½ min)
      - name: Wait for SSH on port 22
        run: |
          for i in {1..20}; do
            if nc -z -w3 $PUBLIC_IP 22; then echo "✅ SSH ready"; exit 0; fi
            echo "⏳ waiting for SSH… $i/20"; sleep 8;
          done
          echo "❌ SSH timeout"; exit 1

      # 8. Health‑check the application (user‑data already deployed it)
      - name: Health Check (expects HTTP 200)
        run: |
          for i in {1..15}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://$PUBLIC_IP)
            if [ "$code" = "200" ]; then echo "✅ App healthy"; exit 0; fi
            echo "⏳ HTTP $code — retry $i/15"; sleep 10;
          done
          echo "❌ App failed health check"; exit 1

      # 9. Upload Terraform state (optional artifact for debugging)
      - name: Upload Terraform state artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: terraform.tfstate

      # 10. Create an automatic PR back into assignment‑2 branch (optional GitOps demo)
      - name: Create Pull Request from PS‑3 to PS‑2
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto PR: Assignment 3 – Infra + Deployment"
          title: "Assignment 3 – Deployed via CI"
          body: |
            - ✅ EC2 provisioned via Terraform
            - 🚀 App deployed through EC2 user‑data (no extra SSH)
            - 🟢 Health check passed on port 80
          base: feature/devops-assignment-2-v2
          branch: feature/devops-assignment-3
