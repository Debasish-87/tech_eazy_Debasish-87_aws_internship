name: Deploy Java App to EC2 (Dev â†’ Prod)

on:
  push:
    branches:
      - feature/devops-assignment-3-final
    tags:
      - 'v*'

env:
  AWS_REGION: ap-south-1

jobs:
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    env:
      STAGE: dev
      TFVARS_FILE: dev_config.tfvars

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform workspace select ${{ env.STAGE }} || terraform workspace new ${{ env.STAGE }}
          terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (Dev)
        run: terraform plan -var-file="${{ env.TFVARS_FILE }}"

      - name: Terraform Apply (Dev)
        run: terraform apply -auto-approve -var-file="${{ env.TFVARS_FILE }}"

      - name: Get EC2 Public IP (Dev)
        id: instance
        run: echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Wait for App Ready File in S3 (Dev)
        run: |
          for i in {1..30}; do
            if aws s3 ls s3://techeazy-logs-debasish-87/status/dev/app_ready.txt >/dev/null 2>&1; then
              echo " Signal received on attempt $i"
              break
            else
              echo " Waiting for app_ready.txt... attempt $i"
              sleep 10
            fi
          done

      - name: Health Check (Dev)
        run: |
          for i in {1..30}; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://${INSTANCE_IP})
            if [[ "$STATUS" == "200" ]]; then
              echo " App is healthy (HTTP 200)"
              exit 0
            else
              echo " Waiting for app to become healthy... attempt $i"
              sleep 10
            fi
          done
          echo " App health check failed"
          exit 1

  deploy-prod:
    name: Deploy to Prod
    needs: deploy-dev
    runs-on: ubuntu-latest
    env:
      STAGE: prod
      TFVARS_FILE: prod_config.tfvars

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inject GitHub PAT into prod_config.tfvars
        run: echo 'github_pat = "${{ secrets.PRIVATE_REPO_PAT }}"' >> prod_config.tfvars

      - name: Terraform Init
        run: |
          terraform workspace select ${{ env.STAGE }} || terraform workspace new ${{ env.STAGE }}
          terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (Prod)
        run: terraform plan -var-file="${{ env.TFVARS_FILE }}"

      - name: Terraform Apply (Prod)
        run: terraform apply -auto-approve -var-file="${{ env.TFVARS_FILE }}"

      - name: Get EC2 Public IP (Prod)
        id: instance
        run: echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Wait for App Ready File in S3 (Prod)
        run: |
          for i in {1..30}; do
            if aws s3 ls s3://techeazy-logs-debasish-87/status/prod/app_ready.txt >/dev/null 2>&1; then
              echo " Signal received on attempt $i"
              break
            else
              echo " Waiting for app_ready.txt... attempt $i"
              sleep 10
            fi
          done

      - name: Health Check (Prod)
        run: |
          for i in {1..30}; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://${INSTANCE_IP})
            if [[ "$STATUS" == "200" ]]; then
              echo " App is healthy (HTTP 200)"
              exit 0
            else
              echo " Waiting for app to become healthy... attempt $i"
              sleep 10
            fi
          done
          echo " App health check failed"
          exit 1
