name: "Multi-Stage Deployment - Dev then Prod"

on:
  push:
    branches:
      - feature/final-assignment-4

jobs:
  deploy-dev:
    name: Deploy to Dev Stage
    runs-on: ubuntu-latest
    environment: dev

    env:
      AWS_REGION: ap-south-1
      TFVARS_FILE: dev_config.tfvars
      STAGE: dev
      LOGS_BUCKET: techeazy-central-logs-debasish-87
      GITHUB_PAT: ""

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file=${{ env.TFVARS_FILE }} \
            -var="stage=${{ env.STAGE }}" \
            -var="github_pat=${{ env.GITHUB_PAT }}"

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var-file=${{ env.TFVARS_FILE }} \
            -var="stage=${{ env.STAGE }}" \
            -var="github_pat=${{ env.GITHUB_PAT }}"

      - name: Fetch EC2 Public IP
        id: ip
        run: echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Wait for app_ready.txt in S3
        run: |
          echo "Waiting for app_ready.txt in S3..."
          for i in {1..30}; do
            if aws s3 ls s3://${{ env.LOGS_BUCKET }}/logs/${{ env.STAGE }}/app_ready.txt >/dev/null 2>&1; then
              echo "app_ready.txt found in S3."
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
            if [ $i -eq 30 ]; then
              echo "Timeout: app_ready.txt not found in S3"
              exit 1
            fi
          done

      - name: Validate App on Port 80
        run: |
          echo "Checking application health at http://${INSTANCE_IP}..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${INSTANCE_IP})
            if [[ "$STATUS" == "200" ]]; then
              echo "Application is healthy (HTTP 200)"
              exit 0
            fi
            echo "Attempt $i failed with HTTP $STATUS"
            sleep 10
          done
          echo "Application failed health check"
          exit 1

  deploy-prod:
    name: Deploy to Prod Stage
    runs-on: ubuntu-latest
    environment: prod
    needs: deploy-dev

    env:
      AWS_REGION: ap-south-1
      TFVARS_FILE: prod_config.tfvars
      STAGE: prod
      LOGS_BUCKET: techeazy-central-logs-debasish-87
      GITHUB_PAT: ${{ secrets.PRIVATE_REPO_PAT }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file=${{ env.TFVARS_FILE }} \
            -var="stage=${{ env.STAGE }}" \
            -var="github_pat=${{ env.GITHUB_PAT }}"

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var-file=${{ env.TFVARS_FILE }} \
            -var="stage=${{ env.STAGE }}" \
            -var="github_pat=${{ env.GITHUB_PAT }}"

      - name: Fetch EC2 Public IP
        id: ip
        run: echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Wait for app_ready.txt in S3
        run: |
          echo "Waiting for app_ready.txt in S3..."
          for i in {1..30}; do
            if aws s3 ls s3://${{ env.LOGS_BUCKET }}/logs/${{ env.STAGE }}/app_ready.txt >/dev/null 2>&1; then
              echo "app_ready.txt found in S3."
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
            if [ $i -eq 30 ]; then
              echo "Timeout: app_ready.txt not found in S3"
              exit 1
            fi
          done

      - name: Validate App on Port 80
        run: |
          echo "Checking application health at http://${INSTANCE_IP}..."
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${INSTANCE_IP})
            if [[ "$STATUS" == "200" ]]; then
              echo "Application is healthy (HTTP 200)"
              exit 0
            fi
            echo "Attempt $i failed with HTTP $STATUS"
            sleep 10
          done
          echo "Application failed health check"
          exit 1
