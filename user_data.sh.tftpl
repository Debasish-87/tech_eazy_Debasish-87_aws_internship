#!/bin/bash
set -euo pipefail

# Variables injected by Terraform
REPO_URL="${REPO_URL}"
log_s3_bucket_name="${log_s3_bucket_name}"
stage="${stage}"
shutdown_after_minutes=${shutdown_after_minutes}

# Update and install only if missing
apt-get update -y

# Install only missing packages to save time
for pkg in unzip curl openjdk-21-jdk git maven libcap2-bin; do
  if ! dpkg -s "$pkg" &>/dev/null; then
    apt-get install -y "$pkg"
  fi
done

# Install AWS CLI v2 if not installed
if ! command -v aws &>/dev/null; then
  echo "Installing AWS CLI..."
  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
  unzip -q /tmp/awscliv2.zip -d /tmp
  /tmp/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
fi

# Grant permission to bind port 80 to java binary (only if not already set)
JAVA_PATH=$(readlink -f "$(which java)")
if ! getcap "$JAVA_PATH" | grep -q 'cap_net_bind_service=+ep'; then
  setcap 'cap_net_bind_service=+ep' "$JAVA_PATH"
fi

# Prepare working directory
cd /home/ubuntu
REPO_NAME=$(basename "${REPO_URL}" .git)
if [ ! -d "$REPO_NAME" ]; then
  git clone --depth=1 "${REPO_URL}"
fi
cd "$REPO_NAME"

# Build app with minimal logging to speed up
mvn -B clean install -DskipTests

# Run the app on port 80 in background, redirect logs to /var/log/my-app.log
nohup java -jar target/*.jar --server.port=80 > /var/log/my-app.log 2>&1 &

# Instead of waiting fixed 120s, poll app health (optional)
# Here we wait shorter fixed time to speed up startup; adjust if needed
sleep 30

# Create fallback config (fast)
cat <<EOF > /home/ubuntu/app_config.json
{
  "stage": "${stage}",
  "source": "local-fallback",
  "timestamp": "$(date --iso-8601=seconds)"
}
EOF
echo "âœ… Local fallback config created."

# Upload logs to S3 (best effort)
TIMESTAMP=$(date +%Y%m%dT%H%M%S)
aws s3 cp /var/log/cloud-init.log s3://${log_s3_bucket_name}/${stage}/logs/system_logs/cloud-init-${TIMESTAMP}.log || echo "cloud-init upload failed"
aws s3 cp /var/log/my-app.log s3://${log_s3_bucket_name}/${stage}/logs/app_logs/app-${TIMESTAMP}.log || echo "app.log upload failed"

# Mark app as ready
touch /home/ubuntu/app_ready.txt
aws s3 cp /home/ubuntu/app_ready.txt s3://${log_s3_bucket_name}/${stage}/status/app_ready.txt || echo "app_ready.txt upload failed"

# Auto shutdown after defined minutes
shutdown -h +${shutdown_after_minutes}
